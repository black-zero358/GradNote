/* tslint:disable */
/* eslint-disable */
/**
 * GradNote API
 * 错题知识点管理系统API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ExtractResult
 */
export interface ExtractResult {
    /**
     * 
     * @type {string}
     * @memberof ExtractResult
     */
    'status': string;
    /**
     * 
     * @type {object}
     * @memberof ExtractResult
     */
    'subject_info': object;
    /**
     * 
     * @type {Array<KnowledgePoint>}
     * @memberof ExtractResult
     */
    'knowledge_points': Array<KnowledgePoint>;
    /**
     * 
     * @type {boolean}
     * @memberof ExtractResult
     */
    'is_complete': boolean;
    /**
     * 
     * @type {object}
     * @memberof ExtractResult
     */
    'evaluation': object;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 图像处理响应模型
 * @export
 * @interface ImageProcessingResponse
 */
export interface ImageProcessingResponse {
    /**
     * 
     * @type {string}
     * @memberof ImageProcessingResponse
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof ImageProcessingResponse
     */
    'text'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageProcessingResponse
     */
    'image_url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageProcessingResponse
     */
    'message'?: string | null;
}
/**
 * 
 * @export
 * @interface KnowledgePoint
 */
export interface KnowledgePoint {
    /**
     * 
     * @type {string}
     * @memberof KnowledgePoint
     */
    'subject': string;
    /**
     * 
     * @type {string}
     * @memberof KnowledgePoint
     */
    'chapter': string;
    /**
     * 
     * @type {string}
     * @memberof KnowledgePoint
     */
    'section': string;
    /**
     * 
     * @type {string}
     * @memberof KnowledgePoint
     */
    'item': string;
    /**
     * 
     * @type {string}
     * @memberof KnowledgePoint
     */
    'details'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof KnowledgePoint
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof KnowledgePoint
     */
    'mark_count': number;
    /**
     * 
     * @type {string}
     * @memberof KnowledgePoint
     */
    'created_at': string;
}
/**
 * 
 * @export
 * @interface Mark
 */
export interface Mark {
    /**
     * 
     * @type {number}
     * @memberof Mark
     */
    'knowledge_point_id': number;
    /**
     * 
     * @type {number}
     * @memberof Mark
     */
    'question_id': number;
    /**
     * 
     * @type {number}
     * @memberof Mark
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Mark
     */
    'user_id': number;
    /**
     * 
     * @type {string}
     * @memberof Mark
     */
    'marked_at': string;
}
/**
 * 
 * @export
 * @interface MarkCreate
 */
export interface MarkCreate {
    /**
     * 
     * @type {number}
     * @memberof MarkCreate
     */
    'knowledge_point_id': number;
    /**
     * 
     * @type {number}
     * @memberof MarkCreate
     */
    'question_id': number;
}
/**
 * 
 * @export
 * @interface Question
 */
export interface Question {
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'solution'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'remarks'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Question
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Question
     */
    'user_id': number;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'image_url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'created_at': string;
}
/**
 * 
 * @export
 * @interface QuestionCreate
 */
export interface QuestionCreate {
    /**
     * 
     * @type {string}
     * @memberof QuestionCreate
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof QuestionCreate
     */
    'solution'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QuestionCreate
     */
    'remarks'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QuestionCreate
     */
    'image_url'?: string | null;
}
/**
 * 
 * @export
 * @interface QuestionResponse
 */
export interface QuestionResponse {
    /**
     * 
     * @type {string}
     * @memberof QuestionResponse
     */
    'status': string;
    /**
     * 
     * @type {}
     * @memberof QuestionResponse
     */
    'data'?:  | null;
    /**
     * 
     * @type {string}
     * @memberof QuestionResponse
     */
    'message'?: string | null;
}
/**
 * 
 * @export
 * @interface QuestionUpdate
 */
export interface QuestionUpdate {
    /**
     * 
     * @type {string}
     * @memberof QuestionUpdate
     */
    'content'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QuestionUpdate
     */
    'solution'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QuestionUpdate
     */
    'remarks'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QuestionUpdate
     */
    'image_url'?: string | null;
}
/**
 * 
 * @export
 * @interface SolveResponse
 */
export interface SolveResponse {
    /**
     * 
     * @type {string}
     * @memberof SolveResponse
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof SolveResponse
     */
    'message': string;
    /**
     * 
     * @type {SolveResult}
     * @memberof SolveResponse
     */
    'data'?: SolveResult | null;
}
/**
 * 
 * @export
 * @interface SolveResult
 */
export interface SolveResult {
    /**
     * 
     * @type {string}
     * @memberof SolveResult
     */
    'question': string;
    /**
     * 
     * @type {string}
     * @memberof SolveResult
     */
    'solution': string;
    /**
     * 
     * @type {boolean}
     * @memberof SolveResult
     */
    'review_passed'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof SolveResult
     */
    'review_reason'?: string | null;
    /**
     * 
     * @type {Array<KnowledgePoint>}
     * @memberof SolveResult
     */
    'knowledge_points': Array<KnowledgePoint>;
    /**
     * 
     * @type {Array<KnowledgePoint>}
     * @memberof SolveResult
     */
    'new_knowledge_points': Array<KnowledgePoint>;
}
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'token_type'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'created_at': string;
}
/**
 * 
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 创建新错题
         * @summary Create Question
         * @param {QuestionCreate} questionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuestionApiV1QuestionsPost: async (questionCreate: QuestionCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionCreate' is not null or undefined
            assertParamExists('createQuestionApiV1QuestionsPost', 'questionCreate', questionCreate)
            const localVarPath = `/api/v1/questions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 从图片创建错题  此API将图片处理与错题创建结合在一起，一步完成从图片提取文本并创建错题的过程。  处理流程: 1. 上传图片 2. 使用图像处理服务提取文本内容 3. 将提取的文本及图片URL保存为新的错题  参数: - file: 错题图片文件  返回: - status: 处理状态 (success/error) - data: 创建的错题信息 - message: 操作结果消息
         * @summary Create Question From Image
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuestionFromImageApiV1QuestionsFromImagePost: async (file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('createQuestionFromImageApiV1QuestionsFromImagePost', 'file', file)
            const localVarPath = `/api/v1/questions/from-image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 创建用户知识点标记记录
         * @summary Create User Mark
         * @param {MarkCreate} markCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserMarkApiV1KnowledgeUserMarkPost: async (markCreate: MarkCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'markCreate' is not null or undefined
            assertParamExists('createUserMarkApiV1KnowledgeUserMarkPost', 'markCreate', markCreate)
            const localVarPath = `/api/v1/knowledge/user-mark`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(markCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除错题
         * @summary Delete Question
         * @param {number} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuestionApiV1QuestionsQuestionIdDelete: async (questionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionId' is not null or undefined
            assertParamExists('deleteQuestionApiV1QuestionsQuestionIdDelete', 'questionId', questionId)
            const localVarPath = `/api/v1/questions/{question_id}`
                .replace(`{${"question_id"}}`, encodeURIComponent(String(questionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 从错题中提取知识点  参数: - question_id: 错题ID  返回: - 提取的知识点信息
         * @summary Extract Knowledge
         * @param {number} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractKnowledgeApiV1SolvingExtractQuestionIdPost: async (questionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionId' is not null or undefined
            assertParamExists('extractKnowledgeApiV1SolvingExtractQuestionIdPost', 'questionId', questionId)
            const localVarPath = `/api/v1/solving/extract/{question_id}`
                .replace(`{${"question_id"}}`, encodeURIComponent(String(questionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取指定科目的所有章节
         * @summary Get Chapters
         * @param {string} subject 科目名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChaptersApiV1KnowledgeChaptersGet: async (subject: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject' is not null or undefined
            assertParamExists('getChaptersApiV1KnowledgeChaptersGet', 'subject', subject)
            const localVarPath = `/api/v1/knowledge/chapters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据ID获取知识点详情
         * @summary Get Knowledge Point
         * @param {number} knowledgePointId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKnowledgePointApiV1KnowledgeKnowledgePointIdGet: async (knowledgePointId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'knowledgePointId' is not null or undefined
            assertParamExists('getKnowledgePointApiV1KnowledgeKnowledgePointIdGet', 'knowledgePointId', knowledgePointId)
            const localVarPath = `/api/v1/knowledge/{knowledge_point_id}`
                .replace(`{${"knowledge_point_id"}}`, encodeURIComponent(String(knowledgePointId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 基于结构化信息（科目、章节、小节）查询知识点
         * @summary Get Knowledge Points By Structure
         * @param {string} subject 科目
         * @param {string | null} [chapter] 章节
         * @param {string | null} [section] 小节
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKnowledgePointsByStructureApiV1KnowledgeStructureGet: async (subject: string, chapter?: string | null, section?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject' is not null or undefined
            assertParamExists('getKnowledgePointsByStructureApiV1KnowledgeStructureGet', 'subject', subject)
            const localVarPath = `/api/v1/knowledge/structure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }

            if (chapter !== undefined) {
                localVarQueryParameter['chapter'] = chapter;
            }

            if (section !== undefined) {
                localVarQueryParameter['section'] = section;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取最热门的知识点（根据标记次数）
         * @summary Get Popular Knowledge Points
         * @param {number} [limit] 返回的记录数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopularKnowledgePointsApiV1KnowledgePopularGet: async (limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/knowledge/popular`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取指定科目和章节的所有小节
         * @summary Get Sections
         * @param {string} subject 科目名称
         * @param {string} chapter 章节名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectionsApiV1KnowledgeSectionsGet: async (subject: string, chapter: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject' is not null or undefined
            assertParamExists('getSectionsApiV1KnowledgeSectionsGet', 'subject', subject)
            // verify required parameter 'chapter' is not null or undefined
            assertParamExists('getSectionsApiV1KnowledgeSectionsGet', 'chapter', chapter)
            const localVarPath = `/api/v1/knowledge/sections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }

            if (chapter !== undefined) {
                localVarQueryParameter['chapter'] = chapter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取所有科目列表
         * @summary Get Subjects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectsApiV1KnowledgeSubjectsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/knowledge/subjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取当前用户的所有标记
         * @summary Get User Marks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMarksApiV1KnowledgeUserMarksGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/knowledge/user-marks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login For Access Token
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginForAccessTokenApiV1AuthLoginPost: async (username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('loginForAccessTokenApiV1AuthLoginPost', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('loginForAccessTokenApiV1AuthLoginPost', 'password', password)
            const localVarPath = `/api/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 增加知识点标记次数
         * @summary Mark Knowledge Point
         * @param {number} knowledgePointId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markKnowledgePointApiV1KnowledgeMarkKnowledgePointIdPost: async (knowledgePointId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'knowledgePointId' is not null or undefined
            assertParamExists('markKnowledgePointApiV1KnowledgeMarkKnowledgePointIdPost', 'knowledgePointId', knowledgePointId)
            const localVarPath = `/api/v1/knowledge/mark/{knowledge_point_id}`
                .replace(`{${"knowledge_point_id"}}`, encodeURIComponent(String(knowledgePointId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 处理错题图像并提取文本  此API仅进行图像处理并返回结果，不会在数据库中创建错题。 常用于： 1. 预览图像识别结果 2. 获取图像文本后由前端进行进一步处理 3. 作为其他API的基础服务（如/questions/from-image调用了此服务）  处理流程: 1. 上传并保存图片到服务器 2. 使用图像处理服务提取文本内容 3. 返回提取的文本和保存的图片URL  参数: - file: 要处理的图像文件  返回: - status: 处理状态 (success/error) - text: 从图像中提取的文本 - image_url: 保存后的图像URL - message: 错误信息（仅当status为error时）
         * @summary Process Image
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processImageApiV1ImageProcessPost: async (file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('processImageApiV1ImageProcessPost', 'file', file)
            const localVarPath = `/api/v1/image/process`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取特定错题详情
         * @summary Read Question
         * @param {number} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readQuestionApiV1QuestionsQuestionIdGet: async (questionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionId' is not null or undefined
            assertParamExists('readQuestionApiV1QuestionsQuestionIdGet', 'questionId', questionId)
            const localVarPath = `/api/v1/questions/{question_id}`
                .replace(`{${"question_id"}}`, encodeURIComponent(String(questionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取当前用户的错题列表
         * @summary Read Questions
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readQuestionsApiV1QuestionsGet: async (skip?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/questions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUserApiV1AuthRegisterPost: async (userCreate: UserCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('registerUserApiV1AuthRegisterPost', 'userCreate', userCreate)
            const localVarPath = `/api/v1/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 按条件搜索知识点
         * @summary Search Knowledge Points
         * @param {string | null} [subject] 科目
         * @param {string | null} [chapter] 章节
         * @param {string | null} [section] 小节
         * @param {string | null} [item] 知识点名称（支持模糊搜索）
         * @param {string | null} [sortBy] 排序字段，例如：mark_count, created_at
         * @param {number} [skip] 跳过的记录数
         * @param {number} [limit] 返回的最大记录数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchKnowledgePointsApiV1KnowledgeSearchGet: async (subject?: string | null, chapter?: string | null, section?: string | null, item?: string | null, sortBy?: string | null, skip?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/knowledge/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }

            if (chapter !== undefined) {
                localVarQueryParameter['chapter'] = chapter;
            }

            if (section !== undefined) {
                localVarQueryParameter['section'] = section;
            }

            if (item !== undefined) {
                localVarQueryParameter['item'] = item;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 解答错题  参数: - question_id: 错题ID  返回: - 解题结果，包括解题步骤和相关知识点
         * @summary Solve Question
         * @param {number} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        solveQuestionApiV1SolvingQuestionIdPost: async (questionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionId' is not null or undefined
            assertParamExists('solveQuestionApiV1SolvingQuestionIdPost', 'questionId', questionId)
            const localVarPath = `/api/v1/solving/{question_id}`
                .replace(`{${"question_id"}}`, encodeURIComponent(String(questionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新错题
         * @summary Update Question
         * @param {number} questionId 
         * @param {QuestionUpdate} questionUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuestionApiV1QuestionsQuestionIdPut: async (questionId: number, questionUpdate: QuestionUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionId' is not null or undefined
            assertParamExists('updateQuestionApiV1QuestionsQuestionIdPut', 'questionId', questionId)
            // verify required parameter 'questionUpdate' is not null or undefined
            assertParamExists('updateQuestionApiV1QuestionsQuestionIdPut', 'questionUpdate', questionUpdate)
            const localVarPath = `/api/v1/questions/{question_id}`
                .replace(`{${"question_id"}}`, encodeURIComponent(String(questionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 创建新错题
         * @summary Create Question
         * @param {QuestionCreate} questionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuestionApiV1QuestionsPost(questionCreate: QuestionCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Question>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQuestionApiV1QuestionsPost(questionCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createQuestionApiV1QuestionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 从图片创建错题  此API将图片处理与错题创建结合在一起，一步完成从图片提取文本并创建错题的过程。  处理流程: 1. 上传图片 2. 使用图像处理服务提取文本内容 3. 将提取的文本及图片URL保存为新的错题  参数: - file: 错题图片文件  返回: - status: 处理状态 (success/error) - data: 创建的错题信息 - message: 操作结果消息
         * @summary Create Question From Image
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuestionFromImageApiV1QuestionsFromImagePost(file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQuestionFromImageApiV1QuestionsFromImagePost(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createQuestionFromImageApiV1QuestionsFromImagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 创建用户知识点标记记录
         * @summary Create User Mark
         * @param {MarkCreate} markCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserMarkApiV1KnowledgeUserMarkPost(markCreate: MarkCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Mark>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserMarkApiV1KnowledgeUserMarkPost(markCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createUserMarkApiV1KnowledgeUserMarkPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 删除错题
         * @summary Delete Question
         * @param {number} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQuestionApiV1QuestionsQuestionIdDelete(questionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Question>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQuestionApiV1QuestionsQuestionIdDelete(questionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteQuestionApiV1QuestionsQuestionIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 从错题中提取知识点  参数: - question_id: 错题ID  返回: - 提取的知识点信息
         * @summary Extract Knowledge
         * @param {number} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extractKnowledgeApiV1SolvingExtractQuestionIdPost(questionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExtractResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extractKnowledgeApiV1SolvingExtractQuestionIdPost(questionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.extractKnowledgeApiV1SolvingExtractQuestionIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取指定科目的所有章节
         * @summary Get Chapters
         * @param {string} subject 科目名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChaptersApiV1KnowledgeChaptersGet(subject: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string | null>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChaptersApiV1KnowledgeChaptersGet(subject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getChaptersApiV1KnowledgeChaptersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 根据ID获取知识点详情
         * @summary Get Knowledge Point
         * @param {number} knowledgePointId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKnowledgePointApiV1KnowledgeKnowledgePointIdGet(knowledgePointId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KnowledgePoint>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKnowledgePointApiV1KnowledgeKnowledgePointIdGet(knowledgePointId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getKnowledgePointApiV1KnowledgeKnowledgePointIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 基于结构化信息（科目、章节、小节）查询知识点
         * @summary Get Knowledge Points By Structure
         * @param {string} subject 科目
         * @param {string | null} [chapter] 章节
         * @param {string | null} [section] 小节
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKnowledgePointsByStructureApiV1KnowledgeStructureGet(subject: string, chapter?: string | null, section?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KnowledgePoint>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKnowledgePointsByStructureApiV1KnowledgeStructureGet(subject, chapter, section, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getKnowledgePointsByStructureApiV1KnowledgeStructureGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取最热门的知识点（根据标记次数）
         * @summary Get Popular Knowledge Points
         * @param {number} [limit] 返回的记录数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPopularKnowledgePointsApiV1KnowledgePopularGet(limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KnowledgePoint>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPopularKnowledgePointsApiV1KnowledgePopularGet(limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPopularKnowledgePointsApiV1KnowledgePopularGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取指定科目和章节的所有小节
         * @summary Get Sections
         * @param {string} subject 科目名称
         * @param {string} chapter 章节名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSectionsApiV1KnowledgeSectionsGet(subject: string, chapter: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string | null>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSectionsApiV1KnowledgeSectionsGet(subject, chapter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getSectionsApiV1KnowledgeSectionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取所有科目列表
         * @summary Get Subjects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubjectsApiV1KnowledgeSubjectsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string | null>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubjectsApiV1KnowledgeSubjectsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getSubjectsApiV1KnowledgeSubjectsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取当前用户的所有标记
         * @summary Get User Marks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserMarksApiV1KnowledgeUserMarksGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Mark>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserMarksApiV1KnowledgeUserMarksGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserMarksApiV1KnowledgeUserMarksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Login For Access Token
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginForAccessTokenApiV1AuthLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginForAccessTokenApiV1AuthLoginPost(username, password, grantType, scope, clientId, clientSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.loginForAccessTokenApiV1AuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 增加知识点标记次数
         * @summary Mark Knowledge Point
         * @param {number} knowledgePointId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markKnowledgePointApiV1KnowledgeMarkKnowledgePointIdPost(knowledgePointId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KnowledgePoint>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markKnowledgePointApiV1KnowledgeMarkKnowledgePointIdPost(knowledgePointId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.markKnowledgePointApiV1KnowledgeMarkKnowledgePointIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 处理错题图像并提取文本  此API仅进行图像处理并返回结果，不会在数据库中创建错题。 常用于： 1. 预览图像识别结果 2. 获取图像文本后由前端进行进一步处理 3. 作为其他API的基础服务（如/questions/from-image调用了此服务）  处理流程: 1. 上传并保存图片到服务器 2. 使用图像处理服务提取文本内容 3. 返回提取的文本和保存的图片URL  参数: - file: 要处理的图像文件  返回: - status: 处理状态 (success/error) - text: 从图像中提取的文本 - image_url: 保存后的图像URL - message: 错误信息（仅当status为error时）
         * @summary Process Image
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processImageApiV1ImageProcessPost(file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageProcessingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processImageApiV1ImageProcessPost(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.processImageApiV1ImageProcessPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取特定错题详情
         * @summary Read Question
         * @param {number} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readQuestionApiV1QuestionsQuestionIdGet(questionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Question>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readQuestionApiV1QuestionsQuestionIdGet(questionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readQuestionApiV1QuestionsQuestionIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取当前用户的错题列表
         * @summary Read Questions
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readQuestionsApiV1QuestionsGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Question>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readQuestionsApiV1QuestionsGet(skip, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readQuestionsApiV1QuestionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUserApiV1AuthRegisterPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUserApiV1AuthRegisterPost(userCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.registerUserApiV1AuthRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 按条件搜索知识点
         * @summary Search Knowledge Points
         * @param {string | null} [subject] 科目
         * @param {string | null} [chapter] 章节
         * @param {string | null} [section] 小节
         * @param {string | null} [item] 知识点名称（支持模糊搜索）
         * @param {string | null} [sortBy] 排序字段，例如：mark_count, created_at
         * @param {number} [skip] 跳过的记录数
         * @param {number} [limit] 返回的最大记录数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchKnowledgePointsApiV1KnowledgeSearchGet(subject?: string | null, chapter?: string | null, section?: string | null, item?: string | null, sortBy?: string | null, skip?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KnowledgePoint>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchKnowledgePointsApiV1KnowledgeSearchGet(subject, chapter, section, item, sortBy, skip, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.searchKnowledgePointsApiV1KnowledgeSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 解答错题  参数: - question_id: 错题ID  返回: - 解题结果，包括解题步骤和相关知识点
         * @summary Solve Question
         * @param {number} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async solveQuestionApiV1SolvingQuestionIdPost(questionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.solveQuestionApiV1SolvingQuestionIdPost(questionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.solveQuestionApiV1SolvingQuestionIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 更新错题
         * @summary Update Question
         * @param {number} questionId 
         * @param {QuestionUpdate} questionUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQuestionApiV1QuestionsQuestionIdPut(questionId: number, questionUpdate: QuestionUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Question>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQuestionApiV1QuestionsQuestionIdPut(questionId, questionUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateQuestionApiV1QuestionsQuestionIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 创建新错题
         * @summary Create Question
         * @param {QuestionCreate} questionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuestionApiV1QuestionsPost(questionCreate: QuestionCreate, options?: RawAxiosRequestConfig): AxiosPromise<Question> {
            return localVarFp.createQuestionApiV1QuestionsPost(questionCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 从图片创建错题  此API将图片处理与错题创建结合在一起，一步完成从图片提取文本并创建错题的过程。  处理流程: 1. 上传图片 2. 使用图像处理服务提取文本内容 3. 将提取的文本及图片URL保存为新的错题  参数: - file: 错题图片文件  返回: - status: 处理状态 (success/error) - data: 创建的错题信息 - message: 操作结果消息
         * @summary Create Question From Image
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuestionFromImageApiV1QuestionsFromImagePost(file: File, options?: RawAxiosRequestConfig): AxiosPromise<QuestionResponse> {
            return localVarFp.createQuestionFromImageApiV1QuestionsFromImagePost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 创建用户知识点标记记录
         * @summary Create User Mark
         * @param {MarkCreate} markCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserMarkApiV1KnowledgeUserMarkPost(markCreate: MarkCreate, options?: RawAxiosRequestConfig): AxiosPromise<Mark> {
            return localVarFp.createUserMarkApiV1KnowledgeUserMarkPost(markCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除错题
         * @summary Delete Question
         * @param {number} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuestionApiV1QuestionsQuestionIdDelete(questionId: number, options?: RawAxiosRequestConfig): AxiosPromise<Question> {
            return localVarFp.deleteQuestionApiV1QuestionsQuestionIdDelete(questionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 从错题中提取知识点  参数: - question_id: 错题ID  返回: - 提取的知识点信息
         * @summary Extract Knowledge
         * @param {number} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractKnowledgeApiV1SolvingExtractQuestionIdPost(questionId: number, options?: RawAxiosRequestConfig): AxiosPromise<ExtractResult> {
            return localVarFp.extractKnowledgeApiV1SolvingExtractQuestionIdPost(questionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定科目的所有章节
         * @summary Get Chapters
         * @param {string} subject 科目名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChaptersApiV1KnowledgeChaptersGet(subject: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<string | null>> {
            return localVarFp.getChaptersApiV1KnowledgeChaptersGet(subject, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据ID获取知识点详情
         * @summary Get Knowledge Point
         * @param {number} knowledgePointId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKnowledgePointApiV1KnowledgeKnowledgePointIdGet(knowledgePointId: number, options?: RawAxiosRequestConfig): AxiosPromise<KnowledgePoint> {
            return localVarFp.getKnowledgePointApiV1KnowledgeKnowledgePointIdGet(knowledgePointId, options).then((request) => request(axios, basePath));
        },
        /**
         * 基于结构化信息（科目、章节、小节）查询知识点
         * @summary Get Knowledge Points By Structure
         * @param {string} subject 科目
         * @param {string | null} [chapter] 章节
         * @param {string | null} [section] 小节
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKnowledgePointsByStructureApiV1KnowledgeStructureGet(subject: string, chapter?: string | null, section?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<Array<KnowledgePoint>> {
            return localVarFp.getKnowledgePointsByStructureApiV1KnowledgeStructureGet(subject, chapter, section, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取最热门的知识点（根据标记次数）
         * @summary Get Popular Knowledge Points
         * @param {number} [limit] 返回的记录数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopularKnowledgePointsApiV1KnowledgePopularGet(limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<KnowledgePoint>> {
            return localVarFp.getPopularKnowledgePointsApiV1KnowledgePopularGet(limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定科目和章节的所有小节
         * @summary Get Sections
         * @param {string} subject 科目名称
         * @param {string} chapter 章节名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectionsApiV1KnowledgeSectionsGet(subject: string, chapter: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<string | null>> {
            return localVarFp.getSectionsApiV1KnowledgeSectionsGet(subject, chapter, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取所有科目列表
         * @summary Get Subjects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectsApiV1KnowledgeSubjectsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<string | null>> {
            return localVarFp.getSubjectsApiV1KnowledgeSubjectsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 获取当前用户的所有标记
         * @summary Get User Marks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMarksApiV1KnowledgeUserMarksGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Mark>> {
            return localVarFp.getUserMarksApiV1KnowledgeUserMarksGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login For Access Token
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginForAccessTokenApiV1AuthLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<Token> {
            return localVarFp.loginForAccessTokenApiV1AuthLoginPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * 增加知识点标记次数
         * @summary Mark Knowledge Point
         * @param {number} knowledgePointId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markKnowledgePointApiV1KnowledgeMarkKnowledgePointIdPost(knowledgePointId: number, options?: RawAxiosRequestConfig): AxiosPromise<KnowledgePoint> {
            return localVarFp.markKnowledgePointApiV1KnowledgeMarkKnowledgePointIdPost(knowledgePointId, options).then((request) => request(axios, basePath));
        },
        /**
         * 处理错题图像并提取文本  此API仅进行图像处理并返回结果，不会在数据库中创建错题。 常用于： 1. 预览图像识别结果 2. 获取图像文本后由前端进行进一步处理 3. 作为其他API的基础服务（如/questions/from-image调用了此服务）  处理流程: 1. 上传并保存图片到服务器 2. 使用图像处理服务提取文本内容 3. 返回提取的文本和保存的图片URL  参数: - file: 要处理的图像文件  返回: - status: 处理状态 (success/error) - text: 从图像中提取的文本 - image_url: 保存后的图像URL - message: 错误信息（仅当status为error时）
         * @summary Process Image
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processImageApiV1ImageProcessPost(file: File, options?: RawAxiosRequestConfig): AxiosPromise<ImageProcessingResponse> {
            return localVarFp.processImageApiV1ImageProcessPost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取特定错题详情
         * @summary Read Question
         * @param {number} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readQuestionApiV1QuestionsQuestionIdGet(questionId: number, options?: RawAxiosRequestConfig): AxiosPromise<Question> {
            return localVarFp.readQuestionApiV1QuestionsQuestionIdGet(questionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取当前用户的错题列表
         * @summary Read Questions
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readQuestionsApiV1QuestionsGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Question>> {
            return localVarFp.readQuestionsApiV1QuestionsGet(skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUserApiV1AuthRegisterPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.registerUserApiV1AuthRegisterPost(userCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 按条件搜索知识点
         * @summary Search Knowledge Points
         * @param {string | null} [subject] 科目
         * @param {string | null} [chapter] 章节
         * @param {string | null} [section] 小节
         * @param {string | null} [item] 知识点名称（支持模糊搜索）
         * @param {string | null} [sortBy] 排序字段，例如：mark_count, created_at
         * @param {number} [skip] 跳过的记录数
         * @param {number} [limit] 返回的最大记录数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchKnowledgePointsApiV1KnowledgeSearchGet(subject?: string | null, chapter?: string | null, section?: string | null, item?: string | null, sortBy?: string | null, skip?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<KnowledgePoint>> {
            return localVarFp.searchKnowledgePointsApiV1KnowledgeSearchGet(subject, chapter, section, item, sortBy, skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 解答错题  参数: - question_id: 错题ID  返回: - 解题结果，包括解题步骤和相关知识点
         * @summary Solve Question
         * @param {number} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        solveQuestionApiV1SolvingQuestionIdPost(questionId: number, options?: RawAxiosRequestConfig): AxiosPromise<SolveResponse> {
            return localVarFp.solveQuestionApiV1SolvingQuestionIdPost(questionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新错题
         * @summary Update Question
         * @param {number} questionId 
         * @param {QuestionUpdate} questionUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuestionApiV1QuestionsQuestionIdPut(questionId: number, questionUpdate: QuestionUpdate, options?: RawAxiosRequestConfig): AxiosPromise<Question> {
            return localVarFp.updateQuestionApiV1QuestionsQuestionIdPut(questionId, questionUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 创建新错题
     * @summary Create Question
     * @param {QuestionCreate} questionCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createQuestionApiV1QuestionsPost(questionCreate: QuestionCreate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createQuestionApiV1QuestionsPost(questionCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 从图片创建错题  此API将图片处理与错题创建结合在一起，一步完成从图片提取文本并创建错题的过程。  处理流程: 1. 上传图片 2. 使用图像处理服务提取文本内容 3. 将提取的文本及图片URL保存为新的错题  参数: - file: 错题图片文件  返回: - status: 处理状态 (success/error) - data: 创建的错题信息 - message: 操作结果消息
     * @summary Create Question From Image
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createQuestionFromImageApiV1QuestionsFromImagePost(file: File, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createQuestionFromImageApiV1QuestionsFromImagePost(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 创建用户知识点标记记录
     * @summary Create User Mark
     * @param {MarkCreate} markCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createUserMarkApiV1KnowledgeUserMarkPost(markCreate: MarkCreate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createUserMarkApiV1KnowledgeUserMarkPost(markCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 删除错题
     * @summary Delete Question
     * @param {number} questionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteQuestionApiV1QuestionsQuestionIdDelete(questionId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteQuestionApiV1QuestionsQuestionIdDelete(questionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 从错题中提取知识点  参数: - question_id: 错题ID  返回: - 提取的知识点信息
     * @summary Extract Knowledge
     * @param {number} questionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public extractKnowledgeApiV1SolvingExtractQuestionIdPost(questionId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).extractKnowledgeApiV1SolvingExtractQuestionIdPost(questionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取指定科目的所有章节
     * @summary Get Chapters
     * @param {string} subject 科目名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getChaptersApiV1KnowledgeChaptersGet(subject: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getChaptersApiV1KnowledgeChaptersGet(subject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据ID获取知识点详情
     * @summary Get Knowledge Point
     * @param {number} knowledgePointId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getKnowledgePointApiV1KnowledgeKnowledgePointIdGet(knowledgePointId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getKnowledgePointApiV1KnowledgeKnowledgePointIdGet(knowledgePointId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 基于结构化信息（科目、章节、小节）查询知识点
     * @summary Get Knowledge Points By Structure
     * @param {string} subject 科目
     * @param {string | null} [chapter] 章节
     * @param {string | null} [section] 小节
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getKnowledgePointsByStructureApiV1KnowledgeStructureGet(subject: string, chapter?: string | null, section?: string | null, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getKnowledgePointsByStructureApiV1KnowledgeStructureGet(subject, chapter, section, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取最热门的知识点（根据标记次数）
     * @summary Get Popular Knowledge Points
     * @param {number} [limit] 返回的记录数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPopularKnowledgePointsApiV1KnowledgePopularGet(limit?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPopularKnowledgePointsApiV1KnowledgePopularGet(limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取指定科目和章节的所有小节
     * @summary Get Sections
     * @param {string} subject 科目名称
     * @param {string} chapter 章节名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSectionsApiV1KnowledgeSectionsGet(subject: string, chapter: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSectionsApiV1KnowledgeSectionsGet(subject, chapter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取所有科目列表
     * @summary Get Subjects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSubjectsApiV1KnowledgeSubjectsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSubjectsApiV1KnowledgeSubjectsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取当前用户的所有标记
     * @summary Get User Marks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserMarksApiV1KnowledgeUserMarksGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserMarksApiV1KnowledgeUserMarksGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login For Access Token
     * @param {string} username 
     * @param {string} password 
     * @param {string | null} [grantType] 
     * @param {string} [scope] 
     * @param {string | null} [clientId] 
     * @param {string | null} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loginForAccessTokenApiV1AuthLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).loginForAccessTokenApiV1AuthLoginPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 增加知识点标记次数
     * @summary Mark Knowledge Point
     * @param {number} knowledgePointId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public markKnowledgePointApiV1KnowledgeMarkKnowledgePointIdPost(knowledgePointId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).markKnowledgePointApiV1KnowledgeMarkKnowledgePointIdPost(knowledgePointId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 处理错题图像并提取文本  此API仅进行图像处理并返回结果，不会在数据库中创建错题。 常用于： 1. 预览图像识别结果 2. 获取图像文本后由前端进行进一步处理 3. 作为其他API的基础服务（如/questions/from-image调用了此服务）  处理流程: 1. 上传并保存图片到服务器 2. 使用图像处理服务提取文本内容 3. 返回提取的文本和保存的图片URL  参数: - file: 要处理的图像文件  返回: - status: 处理状态 (success/error) - text: 从图像中提取的文本 - image_url: 保存后的图像URL - message: 错误信息（仅当status为error时）
     * @summary Process Image
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public processImageApiV1ImageProcessPost(file: File, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).processImageApiV1ImageProcessPost(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取特定错题详情
     * @summary Read Question
     * @param {number} questionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readQuestionApiV1QuestionsQuestionIdGet(questionId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readQuestionApiV1QuestionsQuestionIdGet(questionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取当前用户的错题列表
     * @summary Read Questions
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readQuestionsApiV1QuestionsGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readQuestionsApiV1QuestionsGet(skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register User
     * @param {UserCreate} userCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public registerUserApiV1AuthRegisterPost(userCreate: UserCreate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).registerUserApiV1AuthRegisterPost(userCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 按条件搜索知识点
     * @summary Search Knowledge Points
     * @param {string | null} [subject] 科目
     * @param {string | null} [chapter] 章节
     * @param {string | null} [section] 小节
     * @param {string | null} [item] 知识点名称（支持模糊搜索）
     * @param {string | null} [sortBy] 排序字段，例如：mark_count, created_at
     * @param {number} [skip] 跳过的记录数
     * @param {number} [limit] 返回的最大记录数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchKnowledgePointsApiV1KnowledgeSearchGet(subject?: string | null, chapter?: string | null, section?: string | null, item?: string | null, sortBy?: string | null, skip?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).searchKnowledgePointsApiV1KnowledgeSearchGet(subject, chapter, section, item, sortBy, skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 解答错题  参数: - question_id: 错题ID  返回: - 解题结果，包括解题步骤和相关知识点
     * @summary Solve Question
     * @param {number} questionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public solveQuestionApiV1SolvingQuestionIdPost(questionId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).solveQuestionApiV1SolvingQuestionIdPost(questionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 更新错题
     * @summary Update Question
     * @param {number} questionId 
     * @param {QuestionUpdate} questionUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateQuestionApiV1QuestionsQuestionIdPut(questionId: number, questionUpdate: QuestionUpdate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateQuestionApiV1QuestionsQuestionIdPut(questionId, questionUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckHealthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckHealthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.healthCheckHealthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.healthCheckHealthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthCheckHealthGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthCheckHealthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}



